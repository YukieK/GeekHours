#!/usr/bin/env python3
""" geekhours command """

import argparse
from os import path, getenv
from typing import List
from datetime import date, datetime
from geekhours.command import Command


def initialize():
    """ Initialize database. """
    db_name = '.geekhours.db'
    db_path = path.join(getenv('HOME'), db_name)
    today = datetime.strptime(str(date.today()), '%Y-%m-%d').date()
    return db_path, today


# Handlers for course_subparser
def list_course(args: str, db_path: str):
    """ geekhours course list

    Options:
        --format, -f: Format records to comma separated CSV or JSON and
                      write to a file.
        --output, -o: Specify a file path to save records.
    """
    cmd = Command(db_path)
    records = cmd.show(args.course)
    column = cmd.show_column(args.course)
    default_name = ['courses.csv', 'courses.json']

    if args.format == 'csv':
        if args.output:
            try:
                cmd.dump_to_csv(records, args.output, column)
                print(args.output)
            except FileExistsError as error:
                print(error)
        else:
            try:
                cmd.dump_to_csv(records, default_name[0], column)
                print(default_name[0])
            except FileExistsError as error:
                print(error)
    if args.format == 'json':
        if args.output:
            try:
                cmd.dump_to_json(records, args.output)
                print(args.output)
            except FileExistsError as error:
                print(error)
        else:
            try:
                cmd.dump_to_json(records, default_name[1])
                print(default_name[1])
            except FileExistsError as error:
                print(error)
    if not args.format:
        print(records)


def add_course(args: List[str], db_path: str):
    """ geekhours course add """
    cmd = Command(db_path)
    cmd.insert_course(args.course_name)


def remove_course(args: str, db_path: str):
    """ geekhours course rm """
    cmd = Command(db_path)
    cmd.remove_course(args.course_name)


# Handlers for done_subparser
def list_done(args: str, db_path: str):
    """ geekhours done list

    Options:
        --format, -f: Format records to comma separated CSV or JSON and
                      write to a file.
        --output, -o: Specify a file path to save records.
    """
    cmd = Command(db_path)
    records = cmd.show(args.done)
    column = cmd.show_column(args.done)
    default_name = ['records.csv', 'records.json']

    if args.format == 'csv':
        if args.output:
            try:
                cmd.dump_to_csv(records, args.output, column)
                print(args.output)
            except FileExistsError as error:
                print(error)
        else:
            try:
                cmd.dump_to_csv(records, default_name[0], column)
                print(default_name[0])
            except FileExistsError as error:
                print(error)
    if args.format == 'json':
        if args.output:
            try:
                cmd.dump_to_json(records, args.output)
                print(args.output)
            except FileExistsError as error:
                print(error)
        else:
            try:
                cmd.dump_to_json(records, default_name[1])
                print(default_name[1])
            except FileExistsError as error:
                print(error)

    if not args.format:
        print(records)


def add_done(args: str, db_path: str):
    """  geekhours done add """
    cmd = Command(db_path)
    cmd.insert_donelist(args.date, args.course_name, args.duration)


def remove_done(args: str, db_path: str):
    """ geekhours done rm """
    args.date = str(args.date)
    args.course_name = str(args.course_name)
    cmd = Command(db_path)
    cmd.remove_donelist(args.date, args.course_name)


# geekhours sum
def sum_hours(args: str, db_path: str):
    """ geekhours sum """
    cmd = Command(db_path)
    print(cmd.show_total_hours())


# geekhours sum course
def sum_hours_course(args: str, db_path: str):
    """ geekhours sum course """
    cmd = Command(db_path)
    print(cmd.show_total_hours_course())


# geekhours sum week
def sum_hours_week(args: str, db_path: str):
    """ geekhours sum week """
    cmd = Command(db_path)
    if args.course:
        print(cmd.show_total_hours_week(args.course))
    else:
        print(cmd.show_total_hours_week())


# geekhours sum month
def sum_hours_month(args: str, db_path: str):
    """ geekhours sum month """
    cmd = Command(db_path)
    if args.course:
        print(cmd.show_total_hours_month(args.course))
    else:
        print(cmd.show_total_hours_month())


def get_args(today: str):
    """ Parsers for 'corse' and 'done' sub-commands """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Geekhours is a management tool for the study time.')

    subparsers = parser.add_subparsers(
        title='Synopsis',
        description=
        'geekhours course list\n'
        'geekhours course add course_name [course_name ...]\n'
        'geekhours course rm course_name\n'
        'geekhours done list\n'
        'geekhours done add [--date [date]] [--duration [duration]] course_name\n'
        'geekhours done rm date course_name',
        help="Sub commands.")

    subparsers.required = True

    # course command
    course_parser = subparsers.add_parser('course', help='Manipulate course.')

    # course's sub-command
    course_subparser = course_parser.add_subparsers()

    # course add
    add_parser = course_subparser.add_parser('add', help='Add course_name.')
    add_parser.add_argument('course_name', nargs='+', help='Course name(s) to add.')
    add_parser.set_defaults(handler=add_course)

    # course rm
    rm_parser = course_subparser.add_parser('rm', help='Remove course.')
    rm_parser.add_argument('course_name', help='Course name to remove.')
    rm_parser.set_defaults(handler=remove_course)

    # course list
    list_parser = course_subparser.add_parser('list', help='List the courses.')
    list_parser.set_defaults(course='course', handler=list_course)
    list_parser.add_argument(
        '-f',
        '--format',
        choices=['csv', 'json'],
        help="Format records to comma separated CSV or JSON and write them to a file.\
              'records.csv' or 'records.json' will be created depending on the format type.\
              Use '--output' or '-o' options to specify a file name.")
    list_parser.add_argument('-o', '--output', help="Specify a file path to save.")

    # done commnad
    done_parser = subparsers.add_parser('done', help='Manipulate done.')

    # done's sub-command
    done_subparser = done_parser.add_subparsers()

    # done add
    done_add_parser = done_subparser.add_parser(
        'add', help="Add the study time with date, course, and duration.")
    done_add_parser.add_argument(
        '-d',
        '--date',
        nargs='?',
        default=today,
        help='The date you studied in zero-padded YYYY-MM-DD format. '
             "If omitted, today's date will be registered by default.")
    done_add_parser.add_argument('course_name', help='Course name you studied.')
    done_add_parser.add_argument(
        '-D',
        '--duration',
        nargs='?',
        default='1',
        help='Study time. 1 is default.',
    )
    done_add_parser.set_defaults(handler=add_done)

    # done rm
    done_rm_parser = done_subparser.add_parser('rm', help="Remove done matching date and course.")
    done_rm_parser.add_argument('date', help='Study date to remove.')
    done_rm_parser.add_argument('course_name', help='Course name to remove.')
    done_rm_parser.set_defaults(handler=remove_done)

    # done list
    done_list_parser = done_subparser.add_parser('list', help='List done.')
    done_list_parser.add_argument(
        '-f',
        '--format',
        choices=['csv', 'json'],
        help="Format records to comma separated CSV or JSON and write them to a file.\
              'records.csv' or 'records.json' will be created depending on the format type.\
              Use '--output' or '-o' options to specify a file name.")
    done_list_parser.add_argument('-o', '--output', help="Specify a file path to save.")
    done_list_parser.set_defaults(done='donelist', handler=list_done)

    # geekhours sum
    sum_parser = subparsers.add_parser('sum', help='Display the total hours studied.')
    sum_parser.set_defaults(handler=sum_hours)

    # Sub-command of 'geekshours sum'
    sum_subparser = sum_parser.add_subparsers()

    # geekhours sum course
    sum_course_parser = sum_subparser.add_parser('course',
                                                 help='Display the total hours per course.')
    sum_course_parser.set_defaults(handler=sum_hours_course)

    # geekhours sum week
    sum_week_parser = sum_subparser.add_parser('week', help='Display the total hours per week.')
    sum_week_parser.add_argument('-c', '--course', help='Display total time per week by course.')
    sum_week_parser.set_defaults(handler=sum_hours_week)

    # geekhours sum month
    sum_month_parser = sum_subparser.add_parser('month', help='Display the total hours per month.')
    sum_month_parser.add_argument('-c',
                                  '--course',
                                  help='Display total hours per month for the specific course.')
    sum_month_parser.set_defaults(handler=sum_hours_month)

    args = parser.parse_args()
    return args


def main():
    """ main """
    db_path, today = initialize()
    args = get_args(today)
    if hasattr(args, 'handler'):
        args.handler(args, db_path)
    else:
        parser = argparse.ArgumentParser()
        parser.print_help()


if __name__ == '__main__':
    main()
